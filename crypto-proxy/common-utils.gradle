apply plugin: CommonUtilities

// This provides a set of common / reusable methods

class CommonUtilities implements Plugin<Project> {

    def void apply(Project project) {
        project.convention.plugins.utilities = new CommonUtilitiesConvention(project)
    }
}

class CommonUtilitiesConvention {
    private Project project

    public CommonUtilitiesConvention(Project project) {
        this.project = project
    }

    // These public methods can be used anywhere if this plugin is used
    def runExternal(commandline) {
        def proc = commandline.execute()
        showExternalOutput(proc)
    }

    def showExternalOutput(proc) {
        proc.in.eachLine { line -> println line }
        proc.err.eachLine { line -> println 'ERROR: ' + line }
        proc.waitFor()
        if (proc.exitValue()) {
            System.exit(proc.exitValue())
        }
    }

    def incrementVersionFile() {
        def currentVersion = project.version
        def major = currentVersion.replaceFirst(/(\d+\.\d+)\.\d+/, '$1')
        def minor = currentVersion.replaceFirst(/\d+\.\d+\.(\d+)/, '$1').toInteger()
        minor++
        def newVersion = major + '.' + minor
        new File("${project.projectDir}/version.txt").write(newVersion)
        println "New version updated to: ${newVersion}."
    }

    /**
     * Finds the first .tgz file from the given configuration's dependency files
     * and copies it into the build/distributions directory.
     * @param configuration
     */
    def copyTarballToDistributions(configuration) {
        def distributionsDir = new File("${project.buildDir}/distributions")
        distributionsDir.mkdirs()
        def deployTarball = configuration.files.find {
            it.name.endsWith('tgz')
        }
        project.copy {
            from deployTarball
            into distributionsDir
        }
    }

    def commitVersionFileAndPush() {
        println "Adding new version file (version.txt) to git..."
        runExternal "git checkout master"
        runExternal "git add version.txt"
        def commandParts = ["git", "commit", "-m", "Increment build after production deployment.", "version.txt"]
        showExternalOutput(commandParts.execute())
        runExternal "git push origin master"
    }
}