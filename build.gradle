apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '0.1'
buildDir = 'build'

mainClassName = "com.flightstats.datahub.app.DataHubMain"

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    repositories {
        maven {
            url 'http://artifactory.dev.pdx.prod/artifactory/plugins-release'
        }
    }
}

configurations {
    codeCoverage
    codeCoverageAnt
}


dependencies {
    compile group: 'org.hectorclient', name: 'hector-core', version: '1.+'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.0.0.M4'
    compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.0.0.M4'
    compile group: 'com.sun.jersey', name: 'jersey-core', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-json', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.17'
    compile group: 'com.sun.jersey.contribs', name: 'jersey-guice', version: '1.17'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.5'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'
    compile group: 'asm', name: 'asm', version: '3.1'
    compile group: 'org.glassfish', name: 'javax.servlet', version: '3.0'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'
    compile group: 'com.google.guava', name: 'guava', version: '13.0'
    compile group: 'joda-time', name: 'joda-time', version: '2.1'
    compile group: 'junit', name: 'junit', version: '4.+'
    compile group: "org.mockito", name: "mockito-all", version: "1.9.5"

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: "org.mockito", name: "mockito-all", version: "1.9.5"

    codeCoverage 'org.jacoco:org.jacoco.agent:0.5.10.201208310627:runtime@jar'
    codeCoverageAnt 'org.jacoco:org.jacoco.ant:0.5.10.201208310627'
}

test {
    systemProperties = System.properties
    jvmArgs "-javaagent:${configurations.codeCoverage.asPath}=destfile=${project.buildDir.path}/coverage-results/jacoco.exec,sessionid=HSServ,append=false",
            '-Djacoco=true',
            '-Xms128m',
            '-Xmx512m',
            '-XX:MaxPermSize=128m'
}

// From: http://www.zorched.net/2012/09/13/java-7-code-coverage-with-gradle-and-jacoco/
task generateCoverageReport << {
    ant {
        taskdef(name: 'jacocoreport', classname: 'org.jacoco.ant.ReportTask', classpath: configurations.codeCoverageAnt.asPath)

        mkdir dir: "build/reports/coverage"

        jacocoreport {
            executiondata {
                fileset(dir: "build/coverage-results") {
                    include name: 'jacoco.exec'
                }
            }
            structure(name: project.name) {
                classfiles {
                    fileset(dir: "build/classes/main") {
                    }
                }
                sourcefiles(encoding: 'UTF-8') {
                    fileset dir: "src/main/java"
                }
            }

            xml destfile: "build/reports/coverage/jacoco.xml"
            html destdir: "build/reports/coverage"
        }
    }
}

task integrationTests << {
    def testdir = "src/test/integration"
    def proc = "jasmine-node ${testdir}".execute()

    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> println 'ERROR: ' + line}
    proc.waitFor()
}
