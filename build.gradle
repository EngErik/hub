apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply from: 'common-utils.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

project.ext.jenkinsBuildNumber = "$System.env.BUILD_NUMBER"
project.ext.jenkinsJobName = "$System.env.JOB_NAME"

group = 'com.flightstats'

version = new File("${projectDir}/version.txt").text

def snapshotVersion = version + "-SNAPSHOT"

project.ext.isDevBuild = !project.ext.properties.containsKey("buildConfig") || !"release".equals(project.ext.buildConfig)

apply from: 'common.gradle'

if (project.ext.isDevBuild) {
    def buildNumber = "dev";
    if (System.env.BUILD_NUMBER != null) {
        buildNumber = System.env.BUILD_NUMBER
    }
    version = snapshotVersion + "-" + buildNumber
}
println "Builing version: ${version}"

buildDir = 'build'

mainClassName = "com.flightstats.datahub.app.DataHubMain"

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.jfrog.org/artifactory/gradle-plugins' }
    }

    dependencies {  //Required to pick up the artifactory plugin
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.16')
    }
}

configurations {
    publish
    publishDev
    integrationTests
    deployStaging
    deployProduction
}

task integrationTar(type: Tar, dependsOn: 'distTar') {
    baseName = "datahub-integration"
    compression = Compression.GZIP
    from "${projectDir}"
    include "bin/*.*"
    include "conf/**"
    include "src/test/integration/*.*"
    include "settings.gradle"
}

artifacts {
    publishDev jar
    publishDev distTar
    publishDev integrationTar

    publish jar
    publish distTar
}

task setupIntegration << {
    println "Setting up the integration environment"
    def integrationTarball = configurations.integrationTests.files.find {
        it.name.startsWith('datahub-integration')
    }

    println "Extracting " + integrationTarball.name
    copy {
        from tarTree(resources.gzip(integrationTarball))
        into projectDir
    }

    def distributionsDir = new File("${buildDir}/distributions")
    distributionsDir.mkdirs()
    def snapshotTarball = configurations.integrationTests.files.find {
        !it.name.startsWith('datahub-integration') && it.name.endsWith('tgz')
    }
    copy {
        from snapshotTarball
        into distributionsDir
    }
}

task integrationTests(dependsOn: setupIntegration) << {
    def testdir = "${projectDir}/src/test/integration"
    def reportsdir = "${projectDir}/build/reports/integration/"
    println "Making " + reportsdir
    new File(reportsdir).mkdirs()
    tasks.deployDev.execute()
    runExternal("jasmine-node --junitreport --output ${reportsdir} ${testdir}")
}

dependencies {
    compile group: 'org.hectorclient', name: 'hector-core', version: '1.+'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.0.0.v20130308'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-common', version: '9.0.0.v20130308'
    compile group: 'com.sun.jersey', name: 'jersey-core', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-json', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17'
    compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.17'
    compile group: 'com.sun.jersey.contribs', name: 'jersey-guice', version: '1.17'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version: '1.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.5'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'
    compile group: 'asm', name: 'asm', version: '3.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.7'
    compile group: 'org.glassfish', name: 'javax.servlet', version: '3.0'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'
    compile group: 'com.google.guava', name: 'guava', version: '13.0'
    compile group: 'joda-time', name: 'joda-time', version: '2.1'
    compile group: "org.hamcrest", name: "hamcrest-core", version: "1.3"
    compile group: "ch.qos.logback", name: "logback-core", version: "1.0.13"
    compile group: "ch.qos.logback", name: "logback-classic", version: "1.0.13"
    compile group: "org.slf4j", name: "slf4j-api", version: "1.7.2"
    compile group: "org.slf4j", name: "jul-to-slf4j", version: "1.7.2"
    compile group: "com.hazelcast", name: "hazelcast", version: "2.5"

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: "org.mockito", name: "mockito-all", version: "1.9.5"

    integrationTests group: 'com.flightstats', name: 'datahub', version: snapshotVersion + '+', transitive: false, configuration: 'publishDev'
    deployStaging group: 'com.flightstats', name: 'datahub', version: version, transitive: false, configuration: 'publish'
    deployProduction group: 'com.flightstats', name: 'datahub', version: version, transitive: false, configuration: 'publish'
}

distTar {
    compression = Compression.GZIP
}

task deployDev << {
    description = "Deploys the distribution to the development environment"
    runExternal("${projectDir}/bin/restart-dev-vpc.sh")
    runExternal("${projectDir}/bin/deploy-to-host.sh datahub-01.cloud-east.dev")
    runExternal("${projectDir}/bin/deploy-to-host.sh datahub-02.cloud-east.dev memory")
}

task deployStaging << {
    description = "Deploys the distribution to the staging environment"
    copyTarballToDistributions(configurations.deployStaging)
    runExternal("${projectDir}/bin/deploy-to-host.sh datahub-01.cloud-east.staging")
}

task deployProduction << {
    description = "Deploys the distribution to the production environment"
    copyTarballToDistributions(configurations.deployProduction)
    runExternal("${projectDir}/bin/deploy-to-host.sh datahub-01.cloud-east.prod")
    incrementVersionFile()
    commitVersionFileAndPush()
}

startScripts {
    ext.jvmOpts = "-Xmx256m"
    doLast {
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', "DEFAULT_JVM_OPTS=\"$ext.jvmOpts\"")
    }
}